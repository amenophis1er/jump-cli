#!/bin/bash

# Jump - Enhanced Directory Shortcut Manager
# Version: 1.0.0
# Author: Amen AMOUZOU
# Repository: https://github.com/amenophis1er/jump-cli

SHORTCUTS_FILE="$HOME/.jump_shortcuts"
CONFIG_FILE="$HOME/.jump_config"

# Enhanced color scheme
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;90m'
BOLD='\033[1m'
DIM='\033[2m'
NC='\033[0m' # No Color

# Brand colors
BRAND_PRIMARY='\033[1;36m'    # Bright cyan for headers
BRAND_SECONDARY='\033[0;34m'  # Blue for paths
BRAND_ACCENT='\033[1;33m'     # Yellow for highlights

# Initialize files if they don't exist
[[ ! -f "$SHORTCUTS_FILE" ]] && touch "$SHORTCUTS_FILE"
[[ ! -f "$CONFIG_FILE" ]] && echo "show_path=true" > "$CONFIG_FILE"

# Enhanced helper functions
print_colored() {
    echo -e "${1}${2}${NC}"
}

print_success() { print_colored "$GREEN" "✓ $1"; }
print_error() { print_colored "$RED" "✗ $1"; }
print_info() { print_colored "$BLUE" "ℹ $1"; }
print_warning() { print_colored "$YELLOW" "⚠ $1"; }

# New formatting functions
print_header() {
    echo -e "${BRAND_PRIMARY}${BOLD}$1${NC}"
}

print_subheader() {
    echo -e "${WHITE}${BOLD}$1${NC}"
}

print_section() {
    echo -e "${CYAN}$1${NC}"
}

print_path() {
    echo -e "${BRAND_SECONDARY}$1${NC}"
}

print_highlight() {
    echo -e "${BRAND_ACCENT}$1${NC}"
}

print_dim() {
    echo -e "${GRAY}$1${NC}"
}

print_separator() {
    echo -e "${GRAY}────────────────────────────────────────────────────────────────────${NC}"
}

print_box_start() {
    echo ""
    print_header "$1"
    echo ""
}

print_tip() {
    echo -e "${DIM}Tip: ${CYAN}$1${NC}"
}

# Get shortcut info
get_shortcut() {
    grep "^$1:" "$SHORTCUTS_FILE" 2>/dev/null
}

# Parse shortcut line
parse_shortcut() {
    name=$(echo "$1" | cut -d':' -f1)
    path=$(echo "$1" | cut -d':' -f2)
    actions=$(echo "$1" | cut -d':' -f3-)
    echo "$name|$path|$actions"
}

# Fuzzy search for shortcuts
fuzzy_search() {
    if [[ -s "$SHORTCUTS_FILE" ]]; then
        grep -i "$1" "$SHORTCUTS_FILE" | head -5
    fi
}

case "$1" in
    "add")
        if [[ -z "$2" || -z "$3" ]]; then
            print_error "Usage: jump add <shortcut> <path> [actions]"
            echo "Examples:"
            echo "  jump add va ~/Projects/Python/voice-agent"
            echo "  jump add va ~/Projects/Python/voice-agent 'source venv/bin/activate'"
            echo "  jump add tm ~/tunnel-manager 'git status;ls -la'"
            exit 1
        fi
        
        shortcut=$2
        path=$(eval echo "$3")
        # Convert to absolute path and resolve symlinks
        path=$(cd "$path" && pwd -P)
        actions=${4:-""}
        
        if [[ ! -d "$path" ]]; then
            print_error "Directory '$path' does not exist"
            exit 1
        fi
        
        # Check if shortcut already exists
        if get_shortcut "$shortcut" >/dev/null; then
            print_warning "Shortcut '$shortcut' already exists. Use 'jump update' to modify it."
            exit 1
        fi
        
        if ! echo "$shortcut:$path:$actions" >> "$SHORTCUTS_FILE" 2>/dev/null; then
            print_error "Failed to write to shortcuts file. Check file permissions."
            exit 1
        fi
        
        print_success "Shortcut created successfully"
        echo ""
        printf "Name:     $(print_highlight "%s")\n" "$shortcut"
        printf "Path:     $(print_path "%s")\n" "$path"
        if [[ -n "$actions" ]]; then
            printf "Actions:  $(print_section "%s")\n" "$actions"
        else
            printf "Actions:  $(print_dim "%s")\n" "(none)"
        fi
        echo ""
        print_section "Quick start:"
        echo "  j $shortcut                    Jump to this directory"
        if [[ -n "$actions" ]]; then
            echo "  j $shortcut run                Jump and execute actions"
        fi
        echo "  j list                    View all shortcuts"
        ;;
        
    "update")
        if [[ -z "$2" || -z "$3" ]]; then
            print_error "Usage: jump update <shortcut> <path> [actions]"
            exit 1
        fi
        
        shortcut=$2
        path=$(eval echo "$3")
        # Convert to absolute path and resolve symlinks
        path=$(cd "$path" && pwd -P)
        actions=${4:-""}
        
        if [[ ! -d "$path" ]]; then
            print_error "Directory '$path' does not exist"
            exit 1
        fi
        
        if ! get_shortcut "$shortcut" >/dev/null; then
            print_error "Shortcut '$shortcut' not found"
            exit 1
        fi
        
        # Remove old entry and add new one
        # grep -v may return 1 if no lines remain, which is OK
        grep -v "^$shortcut:" "$SHORTCUTS_FILE" > "${SHORTCUTS_FILE}.tmp" 2>/dev/null || true
        if ! echo "$shortcut:$path:$actions" >> "${SHORTCUTS_FILE}.tmp" 2>/dev/null || \
           ! mv "${SHORTCUTS_FILE}.tmp" "$SHORTCUTS_FILE" 2>/dev/null; then
            print_error "Failed to update shortcuts file. Check file permissions."
            rm -f "${SHORTCUTS_FILE}.tmp"
            exit 1
        fi
        
        print_success "Shortcut updated successfully"
        echo ""
        printf "Name:     $(print_highlight "%s")\n" "$shortcut"
        printf "Path:     $(print_path "%s")\n" "$path"
        if [[ -n "$actions" ]]; then
            printf "Actions:  $(print_section "%s")\n" "$actions"
        else
            printf "Actions:  $(print_dim "%s")\n" "(none)"
        fi
        echo ""
        print_tip "Use 'j $shortcut' to jump to the updated location"
        ;;
        
    "list"|"ls")
        if [[ -s "$SHORTCUTS_FILE" ]]; then
            count=$(wc -l < "$SHORTCUTS_FILE" | xargs)
            print_box_start "Jump CLI - Your Shortcuts ($count total)"
            
            print_subheader "Name             Path                                      Actions"
            print_separator
            
            while IFS=':' read -r shortcut path actions; do
                # Truncate path for display
                display_path="$path"
                if [[ ${#path} -gt 40 ]]; then
                    display_path="...${path: -37}"
                fi
                
                # Format actions
                action_display="(none)"
                [[ -n "$actions" ]] && action_display="$actions"
                
                printf "  $(print_highlight "%-15s") $(print_path "%-40s") $(print_dim "%s")\n" \
                       "$shortcut" "$display_path" "$action_display"
            done < "$SHORTCUTS_FILE"
            
            echo ""
            print_section "Usage:"
            echo "  j <name>                  Jump to directory"
            echo "  j <name> run              Jump and execute actions (if any)"
            echo "  j help                    More commands and options"
        else
            print_box_start "Jump CLI - Directory Shortcuts"
            
            print_section "No shortcuts configured yet."
            echo ""
            print_section "Get started:"
            echo "  j add myproject ~/Projects/my-app        Add a basic shortcut"
            echo "  j add server ~/server 'npm start'       Add shortcut with action"
            echo "  j help                                  Show full documentation"
            echo ""
            print_section "Examples of useful shortcuts:"
            echo "  j add home ~                           Quick access to home"
            echo "  j add work ~/Documents/Work            Work directory"
            echo "  j add dev ~/Development 'code .'      Open in VS Code"
        fi
        ;;
        
    "search"|"find")
        if [[ -z "$2" ]]; then
            print_error "Usage: jump search <query>"
            exit 1
        fi
        
        results=$(fuzzy_search "$2")
        if [[ -n "$results" ]]; then
            count=$(echo "$results" | wc -l | xargs)
            print_box_start "Jump CLI - Search Results for \"$2\""
            
            print_section "Found $count matching shortcuts:"
            print_separator
            
            echo "$results" | while IFS=':' read -r shortcut path actions; do
                # Truncate path for display
                display_path="$path"
                if [[ ${#path} -gt 40 ]]; then
                    display_path="...${path: -37}"
                fi
                
                # Format actions
                action_display=""
                if [[ -n "$actions" ]]; then
                    action_display="$actions"
                else
                    action_display="(none)"
                fi
                
                printf "  $(print_highlight "%-15s") $(print_path "%-40s") $(print_dim "%s")\n" \
                       "$shortcut" "$display_path" "$action_display"
            done
            
            echo ""
            print_section "Usage:"
            echo "  j <name>                  Jump to directory"
            echo "  j <name> run              Jump and execute actions"
        else
            print_box_start "Jump CLI - Search Results"
            
            print_warning "No shortcuts found matching \"$2\""
            echo ""
            print_section "Suggestions:"
            echo "  j list                    Show all shortcuts"
            echo "  j add $2 <path>          Create this shortcut"
            echo ""
            print_tip "Try partial matches or different keywords"
        fi
        ;;
        
    "remove"|"rm")
        if [[ -z "$2" ]]; then
            print_error "Usage: jump remove <shortcut>"
            exit 1
        fi
        
        if get_shortcut "$2" >/dev/null; then
            # Remove the shortcut (grep -v may return 1 if no lines remain, which is OK)
            grep -v "^$2:" "$SHORTCUTS_FILE" > "${SHORTCUTS_FILE}.tmp" 2>/dev/null || true
            if ! mv "${SHORTCUTS_FILE}.tmp" "$SHORTCUTS_FILE" 2>/dev/null; then
                print_error "Failed to update shortcuts file. Check file permissions."
                rm -f "${SHORTCUTS_FILE}.tmp"
                exit 1
            fi
            print_success "Removed shortcut '$2'"
        else
            print_box_start "Jump CLI - Remove Shortcut"
            
            print_error "Shortcut \"$2\" not found"
            echo ""
            
            if [[ -s "$SHORTCUTS_FILE" ]]; then
                print_section "Available shortcuts to remove:"
                while IFS=':' read -r shortcut path actions; do
                    printf "  $(print_highlight "%-15s") $(print_path "%s")\n" "$shortcut" "$path"
                done < "$SHORTCUTS_FILE"
                echo ""
                print_tip "Use 'j remove <name>' with an existing shortcut name"
            else
                print_section "No shortcuts exist to remove."
                print_tip "Create shortcuts with 'j add <name> <path>'"
            fi
            exit 1
        fi
        ;;
        
    "edit")
        ${EDITOR:-nano} "$SHORTCUTS_FILE"
        ;;
        
    "stats")
        total=$(wc -l < "$SHORTCUTS_FILE" 2>/dev/null || echo 0)
        print_box_start "Jump CLI - Usage Statistics"
        
        if [[ $total -eq 0 ]]; then
            print_section "No shortcuts configured yet"
            echo ""
            print_section "Get started:"
            echo "  j add myproject ~/Projects/my-app        Create your first shortcut"
            echo "  j help                                  View all commands"
        else
            print_section "Total shortcuts: $(print_highlight "$total")"
            
            # Count shortcuts with actions
            actions_count=$(grep -c ':[^:]*:[^:]\+$' "$SHORTCUTS_FILE" 2>/dev/null || echo 0)
            printf "Shortcuts with actions: $(print_highlight "%s")\n" "$actions_count"
            echo ""
            
            if [[ $total -le 5 ]]; then
                print_section "Your shortcuts:"
                print_separator
                while IFS=':' read -r shortcut path actions; do
                    action_display="(none)"
                    [[ -n "$actions" ]] && action_display="$actions"
                    printf "  $(print_highlight "%-15s") $(print_path "%-40s") $(print_dim "%s")\n" \
                           "$shortcut" "$path" "$action_display"
                done < "$SHORTCUTS_FILE"
            else
                print_section "Most recent shortcuts:"
                print_separator
                tail -5 "$SHORTCUTS_FILE" | while IFS=':' read -r shortcut path actions; do
                    action_display="(none)"
                    [[ -n "$actions" ]] && action_display="$actions"
                    printf "  $(print_highlight "%-15s") $(print_path "%-40s") $(print_dim "%s")\n" \
                           "$shortcut" "$path" "$action_display"
                done
            fi
            
            echo ""
            print_section "Quick actions:"
            echo "  j list                    View all shortcuts"
            echo "  j search <query>          Find specific shortcuts"
        fi
        ;;
        
    "export")
        backup_file="${2:-$HOME/jump_backup_$(date +%Y%m%d_%H%M%S).txt}"
        cp "$SHORTCUTS_FILE" "$backup_file"
        print_success "Shortcuts exported to: $backup_file"
        ;;
        
    "import")
        if [[ -z "$2" || ! -f "$2" ]]; then
            print_error "Usage: jump import <backup_file>"
            exit 1
        fi
        cp "$2" "$SHORTCUTS_FILE"
        print_success "Shortcuts imported from: $2"
        ;;
        
    "version"|"--version"|"-v")
        echo "Jump CLI v1.0.0"
        echo "Enhanced Directory Shortcut Manager"
        echo "https://github.com/amenophis1er/jump-cli"
        ;;
        
    "--format-jump")
        # Internal command for shell function to format jump success
        if [[ -z "$2" ]]; then
            echo "cd \"$PWD\""
            exit 0
        fi
        
        shortcut_info=$(get_shortcut "$2")
        if [[ -n "$shortcut_info" ]]; then
            IFS=':' read -r name path actions <<< "$shortcut_info"
            printf "$(print_success "Jumped to:") $(print_highlight "%s")\n" "$name"
            printf "   $(print_path "%s")\n" "$path"
            echo ""
            if [[ -n "$actions" ]]; then
                printf "$(print_section "Available actions:") $(print_dim "%s")\n" "$actions"
                print_tip "Run 'j $name run' to execute actions"
            else
                printf "$(print_dim "Available actions:") $(print_dim "%s")\n" "(none set)"
                print_tip "Add actions with 'j update $name $path \"your command\"'"
            fi
            echo "cd \"$path\""
        else
            echo "cd \"$PWD\""
        fi
        ;;
        
    "help"|"--help"|"-h")
        echo -e "${CYAN}Jump - Enhanced Directory Shortcut Manager${NC}"
        echo ""
        echo -e "${YELLOW}Basic Usage:${NC}"
        echo "  jump <shortcut> [action]      - Jump to directory and optionally run action"
        echo ""
        echo -e "${YELLOW}Management:${NC}"
        echo "  jump add <name> <path> [cmd]  - Add new shortcut with optional command"
        echo "  jump update <name> <path>     - Update existing shortcut"
        echo "  jump list                     - List all shortcuts"
        echo "  jump search <query>           - Search shortcuts"
        echo "  jump remove <name>            - Remove shortcut"
        echo ""
        echo -e "${YELLOW}Advanced:${NC}"
        echo "  jump edit                     - Edit shortcuts file"
        echo "  jump stats                    - Show usage statistics"
        echo "  jump export [file]            - Export shortcuts to file"
        echo "  jump import <file>            - Import shortcuts from file"
        echo "  jump version                  - Show version information"
        echo ""
        echo -e "${YELLOW}Examples:${NC}"
        echo "  jump add va ~/voice-agent 'source venv/bin/activate'"
        echo "  jump va                       - Jump to voice-agent"
        echo "  jump va run                   - Jump and run the stored action"
        ;;
        
    "")
        jump list
        ;;
        
    *)
        # Look for the shortcut
        shortcut_line=$(get_shortcut "$1")
        if [[ -n "$shortcut_line" ]]; then
            parsed=$(parse_shortcut "$shortcut_line")
            name=$(echo "$parsed" | cut -d'|' -f1)
            path=$(echo "$parsed" | cut -d'|' -f2)
            actions=$(echo "$parsed" | cut -d'|' -f3)
            
            # Check if user wants to run actions
            if [[ "$2" == "run" || "$2" == "action" || "$2" == "do" ]] && [[ -n "$actions" ]]; then
                echo "cd '$path' && $actions"
            else
                echo "cd '$path'"
            fi
        else
            # Try fuzzy search
            fuzzy_results=$(fuzzy_search "$1")
            if [[ -n "$fuzzy_results" ]]; then
                count=$(echo "$fuzzy_results" | wc -l)
                if [[ $count -eq 1 ]]; then
                    parsed=$(parse_shortcut "$fuzzy_results")
                    path=$(echo "$parsed" | cut -d'|' -f2)
                    echo "cd '$path'"
                else
                    print_warning "Multiple matches found for '$1':"
                    echo "$fuzzy_results" | while IFS=':' read -r shortcut path actions; do
                        printf "  ${GREEN}%s${NC} -> ${BLUE}%s${NC}\n" "$shortcut" "$path"
                    done
                    exit 1
                fi
            else
                print_box_start "Jump CLI - Shortcut Not Found"
                
                print_error "Shortcut \"$1\" not found"
                echo ""
                
                # Show available shortcuts if any exist
                if [[ -s "$SHORTCUTS_FILE" ]]; then
                    print_section "Available shortcuts:"
                    while IFS=':' read -r shortcut path actions; do
                        printf "  $(print_highlight "%-15s") $(print_path "%s")\n" "$shortcut" "$path"
                    done < "$SHORTCUTS_FILE"
                    echo ""
                fi
                
                print_section "Suggestions:"
                echo "  j list                    Show all shortcuts"
                echo "  j search <partial>        Search by name"
                echo "  j add $1 <path>           Create this shortcut"
                echo ""
                print_tip "Use fuzzy search - partial matches work too!"
                exit 1
            fi
        fi
        ;;
esac
